# Idea of this Mac based workflows is as follows:
# Main job (this one), controlls the schedulling of the associated jobs. 
# It also creates an initial request for a host machine on AWS and grants the access to the machine to the particular jobs.
# Associated jobs has their own scheduller that must be agreed upon outside of this job. 
# Once the external job is started, it requires this job to get access to the secrets require to connect to the machine using qenvs project
# At the end of the day, another schedulled trigger runs a clean up job that will destroy the instance and free up resources.

# Questions
# 1. Should we rely on providing a concrete time frames to a various jobs/teams to make use of the machine?
# 2. Jobs could be run in a sequence, one after another. Every job would need to have a timeout set so we can execute all in 24 hours
# 3. How can we make use of an access information if the jobs are done and we still have a dedicated time on the machine?
# 4. What teams to include? This sound like totally different project/repo

name: MacPipeline

# env:
#   CRON_START: '1 10 * * 4' # “At 10:01 on Thursday.”
#   CRON_END: '10 10 * * 4' # “At 10:10 on Thursday.”

# on:
#   schedule: 
#   - cron: '1 10 * * 4' # “At 10:01 on Thursday.”
#   - cron: '10 10 * * 4' # “At 10:10 on Thursday.”

on:
  [workflow_dispatch, workflow_call]

jobs:
  startJob:
    runs-on: ubuntu-latest
    # if: ${{ github.event_name == 'schedule' && github.event.inputs.cron == ${{ env.CRON_START }} }}

    outputs:
      host: ${{ steps.setSecret.outputs.host }}
      key: ${{ steps.setSecret.outputs.key }}

    steps:
      - name: Create an instance on AWS
        run: echo "Creating an instance here..."

      - name: Set access information
        id: setSecret
        run: |
          echo "::set-output name=host::host_ip_address"
          echo "::set-output name=key::host_key"

  finalJob:
    runs-on: ubuntu-latest
    needs: startJob
    # if: ${{ github.event_name == 'schedule' && github.event.inputs.cron == ${{ env.CRON_END }} }}

    outputs:
      host: ${{ steps.setSecret.outputs.host }}
      key: ${{ steps.setSecret.outputs.key }}

    steps:
      - name: Running Clean up Action
        run: |
          echo "Final job is running with HOST=${{ needs.startJob.outputs.host }}"
          echo "Final job is running with KEY=${{ needs.startJob.outputs.key }}"
          echo "Bye bye"

